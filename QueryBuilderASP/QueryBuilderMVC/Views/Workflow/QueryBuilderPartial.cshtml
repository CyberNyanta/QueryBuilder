@using ActiveDatabaseSoftware.ActiveQueryBuilder
@using System.Data.SqlClient
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Mvc.UI
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Server
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Mvc.UI
@model QueryBuilderMVC.Models.ProjectViewModel
@using QueryBuilder.Utils.Encryption

@Html.ActiveQueryBuilder(settings =>
           {
               settings.HttpCompressionEnabled = false;
               settings.PersistentConnection = false;
               settings.Language = "auto";
               settings.UseCustomLanguageFiles = false;
               settings.CustomLanguagePath = "~/Language Files/";

               settings.Init += (sender, e) =>
               {

                   var sessionStoreItem = sender as SessionStoreItem;
                   // Get instance of the QueryBuilder object
                   var queryBuilder = sessionStoreItem.QueryBuilder;
                   queryBuilder.ClearMetadata();
                   //queryBuilder.RefreshDatasourcesMetadata();
                   // create an instance of the proper syntax provider for your database server.
                   // - use AutoSyntaxProvider if you want to detect your database server automatically
                   //   (autodetection works in case of live database connection only);
                   // - use ANSI or Universal syntax provider only if you can't find the right syntax
                   //   provider for your database server.
                   var syntaxProvider = new MSSQLSyntaxProvider();

                   queryBuilder.SyntaxProvider = syntaxProvider;
                   // ===========================================================
                   // a) you can load metadata from the database connection using live database connection
                   //var connection = new SqlConnection { ConnectionString = "Data Source = .; Initial catalog= QueryBuilder; Integrated Security = True" };
                   //var connection = new SqlConnection { ConnectionString = "Data source= .; Initial catalog= QueryBuilder; UID= sa; Password= vjzbuhf;" };
                   var connection = new SqlConnection();

                   var count = 0;
                   foreach (var item in Model.ConnectionDbs)
                   {
                       count++;
                       if (count == 1)
                       {
                           string connectString = String.Format("Data source= {0}; Initial catalog= {1}; UID= {2}; Password= {3};",
                       item.ServerName, item.DatabaseName, item.LoginDB, Rijndael.DecryptStringFromBytes(item.PasswordDB));
                           connection = new SqlConnection { ConnectionString = connectString };

                       }
                       MetadataItem database = queryBuilder.MetadataContainer.AddDatabase(item.DatabaseName);
                   }


                   var metadataProvider = new MSSQLMetadataProvider { Connection = connection };
                   queryBuilder.MetadataProvider = metadataProvider;



                   //MetadataItem database = queryBuilder.MetadataContainer.AddDatabase("ReportServer");
                   //MetadataItem databases = queryBuilder.MetadataContainer.AddDatabase("QueryBuilder");

                   //MetadataItem server = queryBuilder.MetadataContainer.AddServer(".");

                   //queryBuilder.MetadataContainer.LoadAll(true);
                   queryBuilder.InitializeDatabaseSchemaTree();






                   // call the RefreshMetadata to load metadata from a database connection
                   queryBuilder.MetadataStructure.Refresh();

                   // ===========================================================
                   // b) or you can load metadata from the pre-generated XML file
                   //queryBuilder.OfflineMode = false;
                   //queryBuilder.MetadataContainer.ImportFromXML(Server.MapPath("~/Views/Northwind.xml"));
                   //queryBuilder.MetadataStructure.Refresh();
               };
           }).GetHtml()
<div id="all">
    <div id="content-container">
        <div id="qb-ui">
            <div id="tree">
                @Html.ActiveQueryBuilder().ObjectTree(settings =>
                                   {

                                       settings.ShowFields = false;
                                       settings.ShowDescriptons = false;
                                       settings.SortingType = ObjectsSortingType.None;
                                       settings.VisiblePaginationLinksCount = 6;
                                       settings.ItemsPerPage = 24;
                                       settings.PreloadedPagesCount = 5;
                                       settings.ShowAllItemInGroupingSelectLists = true;

                                   }).GetHtml()
            </div>
            <div id="center">
                @Html.ActiveQueryBuilder().SubQueryNavigationBar(settings =>
                                           {
                                               settings.UnionNavBarVisible = true;
                                           }).GetHtml()

                @Html.ActiveQueryBuilder().Canvas(settings =>
                                           {
                                               settings.AllowLinkManipulations = ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Server.Models.LinkManipulations.Allow;
                                               settings.DefaultDatasourceWidth = "auto";
                                               settings.DisableDatasourcePropertiesDialog = false;
                                               settings.DisableLinkPropertiesDialog = false;
                                               settings.DisableQueryPropertiesDialog = false;
                                               settings.MaxDefaultDatasourceHeight = "144";
                                           }).GetHtml()
            </div>
            <div class="clear">
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {


        FixTreeView();
    });

</script>