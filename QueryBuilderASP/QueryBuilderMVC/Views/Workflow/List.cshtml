@model QueryBuilderMVC.Models.ProjectViewModel
@using System.Data.SqlClient
@using System.Web.UI.WebControls
@using ActiveDatabaseSoftware.ActiveQueryBuilder
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Mvc.UI
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Server
@using ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Mvc.UI
@using QueryBuilder.Utils.Encryption


<script src="~/Scripts/jquery.jqGrid.min.js" type="text/javascript"></script>
<script src="~/Scripts/i18n/grid.locale-en.js" type="text/javascript"></script>


@{
    Layout = "~/Views/Shared/_Workflow.cshtml";
}

<div style="padding-top: 20px; ">

    <div class="column column_left col-xs-12 col-lg-2 col-md-2 col-sm-2" \>

        <div class="portlet" id="id_1">
            <div class="portlet-header ">
                <div style="width:100%; height: 30px;">
                    @if (Request.IsAuthenticated)
                    {
                        @ViewBag.name
                    }
                    else
                    {

                        <span>@Model.Name</span>

                    }


                    @* IF user autorized and choose current project show buttons for delete and edit project *@


                    @if ((Model.IdCurrentProject != 0) && (Request.IsAuthenticated))
                    {
                        <div>

                            @Html.ActionLink(" ", "DeleteProjectPartial", "Workflow", new { id = Model.IdCurrentProject },
                                new
                                {
                                    @class = "viewDialogDelete IconModalDelete",
                                    data_dialog_title = "Delete project"
                                })
                        </div>
                        <div>
                            @Html.ActionLink(" ", "UpdateProjectPartial", "Workflow", new { id = Model.IdCurrentProject },
                                new
                                {
                                    @class = "viewDialogEdit IconModalEdit",
                                    data_dialog_title = "Edit project"
                                })
                        </div>

                    }
                    else
                    {

                    }

                </div>

            </div>
            <div class="portlet-content">

                <div class="">
                    @if (!Request.IsAuthenticated)
                    {
                        <p>@Model.Description</p>
                    }
                    <p>@ViewBag.desk</p>

                </div>

            </div>
        </div>

        <div class="portlet " id="id_2">
            <div class="portlet-header">

                <div style="display:inline-block;">
                    <div>My connections</div>
                    @if ((Model.IdCurrentProject != 0) && (Request.IsAuthenticated))
                    {
                        <div>
                            @if (ViewBag.ConnectionName == "ConnectionName")
                            {

                                <div>
                                    @Html.ActionLink(" ", "CreateConnectionPartial", "Workflow", new { id = Model.IdCurrentProject },
                                    new
                                    {
                                        @class = "CreateConnection",
                                        data_dialog_title = "Create connection"
                                    })
                                </div>
                            }
                            else
                            {
                                @Html.ActionLink(" ", "CreateConnectionPartial", "Workflow", new { id = Model.IdCurrentProject, count = ViewBag.Count },
                                    new
                                    {
                                        @class = "CreateConnection",
                                        data_dialog_title = "Create connection"
                                    })
                            }


                        </div>

                    }

                </div>


            </div>
            <div class="portlet-content">
                @if (Model.IdCurrentProject != 0)
                {
                    foreach (var item in Model.ConnectionDbs)
                    {
                       
                        <div style="width:100%; border-bottom: solid 1px gray; height: 30px;">
                            @if (Request.IsAuthenticated)
                            {
                                <div class="ItemNameConnection">
                                    @Html.ActionLink(@item.ConnectionName, "UpdateConnectionPartial", "Workflow", new { id = item.ConnectionID },
                                new
                                {
                                    @class = "LinkEdit",
                                    data_dialog_title = "Update connection"
                                })
                                </div>

                                <div>
                                    @Html.ActionLink(" ", "DeleteConnectionPartial", "Workflow", new { id = item.ConnectionID },
                            new
                            {
                                @class = "DeleteConnectionItem iconHeaderDeleteItem",
                                data_dialog_title = "Delete connection"
                            })
                                </div>
                                <div class="">
                                    @Html.ActionLink(" ", "UpdateConnectionPartial", "Workflow", new { id = item.ConnectionID },
                                        new
                                        {
                                            @class = "UpdateConnectionItem",
                                            data_dialog_title = "Update connection"
                                        })
                                </div>
                            }
                            else
                            {
                                <div class="ItemNameConnection">
                                    @item.ConnectionName
                                </div>
                            }

                            <div>
                                @Html.ActionLink(" ", "ERModel", "Builder", new { id = item.ConnectionID },
                                        new
                                        {
                                            @class = "ERModel",
                                            data_dialog_title = "ER-Model",
                                            target="_blank"
                                        })
                            </div>
                        </div>
                        <br />

                    }
                }

            </div>
            
        </div>

        <div class="portlet" id="id_4">
            <div class="portlet-header">Query</div>
            <div class="portlet-content">

                <div class="IconQuery">
                   
                    
                    <div id="SendQuery">
                        @Html.ActionLink(" ", "SendQuery", "Workflow", new { query = "00" },
                                new
                                {
                                    @id = "buttonSend",
                                    @class = "SendQuery",
                                    data_dialog_title = "Send query"
                                })
                    </div>
                    <div id="SaveQuery">
                        @using (Html.BeginForm("SaveQuery", "Workflow", FormMethod.Post))
                        {

                            <input type="text" name="query" class="sqlQuery" style="display: none;"/>

                            <button class="SaveQuery"></button>

                        }
                    </div>

                    <a href="Javascript:void(0);" class="GetResult" onclick="LoadGrid();"></a>

                    @*@Html.ActionLink(" ", "UpdateConnectionPartial", "Workflow", new { id = 33 },
                                new
                                {
                                    @class = "GetResult",
                                    //data_dialog_title = "Update connection"
                                })*@
                </div>

                @Html.ActiveQueryBuilder().SqlEditor().GetHtml()

            <script>
                jQuery(".SaveQuery").click(function() {
                    var s = $("#sql-code").val();  
                    $(".sqlQuery").val(s);

                });

                $(".SendQuery").hover(function(){
                    var s = $("#sql-code").val();  
                    $("#buttonSend").attr("href", "/Workflow/SendQuery?query="+s) ;

                });

                function AjaxPostWithDialog2(url) {
                    console.log("dfd");
                    $.ajax({
                        url: url,
                        type: "POST",
                        data: $('form').serialize(),
                        datatype: "json",
                        success: function (result) {
                            $("#dialogContent").html(result);
                        }
                    });
                };


                function ModalPostDialogSend(selector, url) {

                    $(selector).on("click", function (e) {
                        e.preventDefault();
                        $("<div id='dialogContent'></div>")
                            .addClass("dialog")
                            .appendTo("body")
                            .load(this.href)
                            .dialog({
                                title: $(this).attr("data-dialog-title"),
                                close: function () { $(this).remove() },
                                modal: true,
                                success: {
                                    "": function () {
                                        AjaxPostWithDialog2(url);
                                    }
                                }
                            }
                            );
                    });

                };
                ModalPostDialogSend(".SendQuery", '@Url.Action("SendQueryPartial", "Workflow")');

            </script>





            </div>
            
        </div>



        <div class="portlet" id="id_5">
            <div class="portlet-header">Statistics</div>
            <div class="portlet-content">


            </div>
        </div>
       
    </div>
    <div class="col-xs-12 col-lg-10 col-md-10 col-sm-10">

        <div class="nonSortable">
            <div class="portlet-header">QueryBuilder</div>
            <div id="QueryBuilder" class="portlet-content">

                @if (Model.IdCurrentProject != 0 && Model.ConnectionDbs != null)
                {


                @Html.ActiveQueryBuilder(settings =>
           {
               settings.HttpCompressionEnabled = false;
               settings.PersistentConnection = false;
               settings.Language = "auto";
               settings.UseCustomLanguageFiles = false;
               settings.CustomLanguagePath = "~/Language Files/";

               settings.Init += (sender, e) =>
               {
                   var sessionStoreItem = sender as SessionStoreItem;
                   // Get instance of the QueryBuilder object
                   var queryBuilder = sessionStoreItem.QueryBuilder;

                   // create an instance of the proper syntax provider for your database server.
                   // - use AutoSyntaxProvider if you want to detect your database server automatically
                   //   (autodetection works in case of live database connection only);
                   // - use ANSI or Universal syntax provider only if you can't find the right syntax
                   //   provider for your database server.
                   var syntaxProvider = new MSSQLSyntaxProvider();

                   queryBuilder.SyntaxProvider = syntaxProvider;
                   // ===========================================================
                   // a) you can load metadata from the database connection using live database connection
                   //var connection = new SqlConnection { ConnectionString = "Data Source = .; Initial catalog= QueryBuilder; Integrated Security = True" };
                   //var connection = new SqlConnection { ConnectionString = "Data source= .; Initial catalog= QueryBuilder; UID= sa; Password= vjzbuhf;" };
                   var connection = new SqlConnection();

                   var count = 0;
                   foreach (var item in Model.ConnectionDbs)
                   {
                       count++;
                       if (count == 1)
                       {
                           string connectString = String.Format("Data source= {0}; Initial catalog= {1}; UID= {2}; Password= {3};",
                   item.ServerName, item.DatabaseName, item.LoginDB, Rijndael.DecryptStringFromBytes(item.PasswordDB));
                           connection = new SqlConnection { ConnectionString = connectString };

                       }
                       MetadataItem database = queryBuilder.MetadataContainer.AddDatabase(item.DatabaseName);
                   }


                   var metadataProvider = new MSSQLMetadataProvider { Connection = connection };
                   queryBuilder.MetadataProvider = metadataProvider;



                   //MetadataItem database = queryBuilder.MetadataContainer.AddDatabase("ReportServer");
                   //MetadataItem databases = queryBuilder.MetadataContainer.AddDatabase("QueryBuilder");

                   //MetadataItem server = queryBuilder.MetadataContainer.AddServer(".");

                   //queryBuilder.MetadataContainer.LoadAll(true);
                   queryBuilder.InitializeDatabaseSchemaTree();
                   





                   // call the RefreshMetadata to load metadata from a database connection
                   queryBuilder.MetadataStructure.Refresh();

                   // ===========================================================
                   // b) or you can load metadata from the pre-generated XML file
                   //queryBuilder.OfflineMode = false;
                   //queryBuilder.MetadataContainer.ImportFromXML(Server.MapPath("~/Views/Northwind.xml"));
                   //queryBuilder.MetadataStructure.Refresh();
               };
           }).GetHtml()

                <div id="all">
                    <div id="content-container">
                        <div id="qb-ui">
                            <div id="tree">
                                @Html.ActiveQueryBuilder().ObjectTree(settings =>
                           {
                               
                               settings.ShowFields = false;
                               settings.ShowDescriptons = false;
                               settings.SortingType = ObjectsSortingType.None;
                               settings.VisiblePaginationLinksCount = 6;
                               settings.ItemsPerPage = 24;
                               settings.PreloadedPagesCount = 5;
                               settings.ShowAllItemInGroupingSelectLists = true;
                               
                           }).GetHtml()

                            </div>
                         
                            

                            <div id="center" style="height:700px">
                                @Html.ActiveQueryBuilder().SubQueryNavigationBar(settings =>
                           {
                               settings.UnionNavBarVisible = true;
                           }).GetHtml()

                                @Html.ActiveQueryBuilder().Canvas(settings =>
                           {
                               settings.AllowLinkManipulations = ActiveDatabaseSoftware.ActiveQueryBuilder.Web.Server.Models.LinkManipulations.Allow;
                               settings.DefaultDatasourceWidth = "auto";
                               settings.DisableDatasourcePropertiesDialog = false;
                               settings.DisableLinkPropertiesDialog = false;
                               settings.DisableQueryPropertiesDialog = false;
                               settings.MaxDefaultDatasourceHeight = "144";
                           }).GetHtml()

                                
                               
                                @*@Html.ActiveQueryBuilder().StatusBar().GetHtml()*@
                            </div>
                            <div class="clear">
                            </div>
                        </div>
                    </div>
                </div>






                }
            </div>
        </div>
        <div class="nonSortable">
            <div class="portlet-header">Settings</div>
            <div class="portlet-content">
                @Html.ActiveQueryBuilder().Grid(settings =>
                           {
                               settings.OrColumnCount = 1;
                           }).GetHtml()
            </div>
        </div>
        <div class="nonSortable">
            <div class="portlet-header">Result query</div>
                <div class="portlet-content">
                    <div class="Tools-panel">

                    </div>
                    <div class="IconGrid">

                        @Html.ActionLink(" ", "SendQuery", "Workflow", new { id = 33 },
                                new
                                {
                                    @class = "SavePDF",
                                })
                 

                        @Html.ActionLink(" ", "UpdateConnectionPartial", "Workflow", new { id = 33 },
                                new
                                {
                                    @class = "SaveExcel",
                                })
                    </div>
                    @Html.Partial("DataGridPartial")
                </div>
        </div>
    </div>

</div>




<script src="~/Scripts/WorkflowList.js"></script>

<script>

    $(function SetGetWindow() {
        $(".column").sortable(
            {
                connectWith: ".column",
                handle: ".portlet-header",
                cancel: ".portlet-toggle",
                placeholder: "portlet-placeholder ui-corner-all",
                update: function (event, ui) {
                    var sort_right = $('.column_right').sortable('serialize', { key: 'id' });
                    var sort_left = $('.column').sortable('serialize', { key: 'id' });
                    document.cookie = "sort_right"+@Model.IdCurrentProject+"= " + sort_right;
                    document.cookie = "sort_left"+@Model.IdCurrentProject+"= " + sort_left;
                }

            });

        var x = get_cookie("sort_left"+@Model.IdCurrentProject);
        set_blocks(@Model.IdCurrentProject);

    });

    function LoadGrid() {
        var s = $("#sql-code").val();

        var arr = s.split('From');
        s = '';
        for (var i = 0; i < arr.length; i++) {
            s += arr[i];
            if (i === 0) {
                s += ' From';
            }
        }

        $.ajax({
            type: "POST",
            url: '@Url.Action("GetGridModel")?query=' + s + '&idCurrentProject=' + @Model.IdCurrentProject,
            data: "",
            dataType: "json",
            success: function(result) {
                var modelList = [];
                for (var i = 0; i < result.length; i++) {
                    modelList.push({
                        name: result[i].Name,
                        index: result[i].Index,
                        sortable: result[i].Sortable,
                        align: result[i].Align
                    });
                }

                $("#jqg").jqGrid("GridUnload");

                $("#jqg").jqGrid({
                    jsonReader: {
                        cell: "",
                        id: "0"
                    },
                    url: '@Url.Action("GetData")?query=' + s + '&idCurrentProject=' + @Model.IdCurrentProject,
                    colModel: modelList,
                    datatype: 'json',
                    rowNum: 10,
                    rowList: [10, 20, 30, 50, 100],
                    pager: '#jpager',
                    loadonce: true,
                    autowidth: true,
                    scrollerbar: true
                });

                $("#jqg").jqGrid('navGrid', '#jpager', {
                    search: true,
                    searchtext: "Search",
                    refresh: false,
                    add: false,
                    del: false,
                    edit: false,
                    view: true,
                    viewtext: "View",
                    viewtitle: "Selected record"
                });
            },
            error: function(x, e)
            {
                alert(x.readyState + " "+ x.status +" "+ e.msg);
            }
        });
    };
</script>